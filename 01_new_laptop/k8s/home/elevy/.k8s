#!/usr/bin/env zsh

# print each command when execute 
# set -v

cp /usr/local/bin/kubectl ~/kubectl
source <(kubectl completion zsh)
alias k=kubectl
complete -F __start_kubectl k

KUBECONFIG_FILE=/home/elevy/.kube/config.yaml

function start_k3d(){
  export KUBECONFIG=
	echo "starting the k3d env with 'k3d start' command (namespace=local)"
	k3s_container=$(docker ps --format 'table {{.Names}}'| grep k3d)
	if [ -z "${k3s_container}" ]
	then
	      echo "k3s_container=$k3s_container is NOT RUNNING (run k3d start)"
	      k3d  --verbose  cluster start ginger
	else
	      echo "k3s_container=$k3s_container is RUNNING"
	fi

  #not working
  #setting_env
}

function redeploy_k3d(){
    export KUBECONFIG=

    k3d cluster delete ginger
	  k3d cluster create ginger --api-port 6550 -p 8081:80@loadbalancer --agents 2 --volume /home/elevy/k3d/registries.yaml:/etc/rancher/k3s/registries.yaml

    k3d kubeconfig merge ginger --switch-context
    # it will create new k3d config file /home/elevy/.k3d/kubeconfig-ginger.yaml

    # this broke the kubectl ---- export KUBECONFIG="$(k3d kubeconfig get ginger)"
    # it will create new k3d config file /home/elevy/.kube/config.yaml
}

function setting_env(){
  echo "setting KUBECONFIG to $(k3d kubeconfig get ginger)"
	export KUBECONFIG="$(k3d kubeconfig get ginger)"
}
function check_cluster(){
  echo "---------------> kubectl cluster-info  <---------------"
  kubectl cluster-info

  kubectl config set-cluster k3s-ginger
	kubectl config use-context k3s-ginger

	echo "---------------> kubectl get nodes <---------------"
	kubectl get nodes
	echo "---------------> kubectl config view - Show Merged kubeconfig settings. <---------------"
  kubectl config view
	echo "---------------> kubectl config current-context <---------------"
  kubectl config current-context
	echo "---------------> kubectl cluster-info  <---------------"
  kubectl cluster-info

	echo "---------------> kubens local - setting namesapce=local <---------------"
	#kubens local
}

function connect_to_gcp(){
	echo "connecting to GCP kubernetes cluster"
	gcloud container clusters get-credentials ci-environments --zone us-east1-b --project tr-rnd
	kubens "$(k get namespace -o=custom-columns=NAME:.metadata.name | grep eyal)"
}

function clear_prev_config(){
  echo "---------------> delete prev config file  <---------------"
  rm -rf ${KUBECONFIG_FILE}
}


while true ; do
	echo -n "Connect to -> remote GCP(g) -> local K3D(3) -> redeploy_k3d(x) OR Skip(s): "
	read -r action
	case "$action" in
		g)
			connect_to_gcp
			break
			;;
		3)
			start_k3d
			check_cluster
			break
			;;
		s)
			break
			;;
	  x)
	    redeploy_k3d
	    check_cluster
			break
			;;
		*)
	esac
done



# export KUBECONFIG=/etc/rancher/k3s/k3s.yaml
# env KUBECONFIG=/etc/rancher/k3s/k3s.yaml
# kubectl config get-contexts

# echo 'elBI22pt!' | sudo -S chmod 777 /etc/rancher/k3s/k3s.yaml
# echo 'elBI22pt!' | sudo -S chmod 777 /var/run/docker.sock